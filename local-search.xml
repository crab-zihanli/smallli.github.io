<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记一轮明月</title>
    <link href="/smallli.github.io/2023/11/28/%E8%AE%B0%E4%B8%80%E8%BD%AE%E6%98%8E%E6%9C%88/"/>
    <url>/smallli.github.io/2023/11/28/%E8%AE%B0%E4%B8%80%E8%BD%AE%E6%98%8E%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<p>昨天下午下课走出教学楼时，天还没有完全黑，是一种渐变的蓝，还点缀着浅紫色的云，非常漂亮。</p><img src="/smallli.github.io/2023/11/28/%E8%AE%B0%E4%B8%80%E8%BD%AE%E6%98%8E%E6%9C%88/night_sky.jpg" class title="教学楼门口漂亮的云"><p>我一时兴起来到湖边散步，算起来好久没有来到这边了，可能有空散步的时间都用来在操场走圈了（摊手）。我惊喜地发现今晚的月亮格外的亮，格外的圆。我兴奋地拿出手机想要拍下这一幕，然而手机的镜头是无法拍出的。突然忆起之前有人跟我讲调成专业格式或许能拍清晰一点，我急急开始调参数，当我觉得大致可以时，按下快门的那一刻云彩正好遮住了月亮，于是有了下面这一幕。</p><img src="/smallli.github.io/2023/11/28/%E8%AE%B0%E4%B8%80%E8%BD%AE%E6%98%8E%E6%9C%88/cloud_moon.jpg" class title="被云朵遮挡住的月亮"><p>我有点懊恼，不知是该责怪风，还是该责怪我来的时间是如此不凑巧，亦或是我的手速过慢……天还挺冷的，我瑟缩了一下，将手机揣回口袋继续前行。没走几步，月亮又探出了头，可惜我已无刚见的心情去拍摄了，遂快步转完离开。</p>]]></content>
    
    
    <categories>
      
      <category>随笔杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>散步</tag>
      
      <tag>冬天</tag>
      
      <tag>月亮</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pandas</title>
    <link href="/smallli.github.io/2023/11/13/pandas/"/>
    <url>/smallli.github.io/2023/11/13/pandas/</url>
    
    <content type="html"><![CDATA[<p><strong>Pandas</strong> 是python的核心数据分析支持库，提供了快速、灵活、明确的数据结构，旨在简单、直观地处理关系型、标记型数据。Pandas 的目标是成为 Python 数据分析实践与实战的必备高级工具，其长远目标是成为<strong>最强大、最灵活、可以支持任何语言的开源数据分析工具</strong>。</p><p>Pandas 适用于处理以下类型的数据：</p><ul><li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li><li>有序和无序（非固定频率）的时间序列数据;</li><li>带行列标签的矩阵数据，包括同构或异构型数据;</li><li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li></ul><p>Pandas 基于numpy开发，可以与其它第三方科学计算支持库完美集成。<br><a href="https://www.pypandas.cn/docs/getting_started/overview.html">pandas中文网</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>numpy</title>
    <link href="/smallli.github.io/2023/11/13/numpy/"/>
    <url>/smallli.github.io/2023/11/13/numpy/</url>
    
    <content type="html"><![CDATA[<p>NumPy是使用Python进行科学计算的基础包。NumPy包的核心是 <em>ndarray</em> 对象。<br>对于循环而言，当涉及到 <em>ndarray</em> 时，<strong>逐个元素的操作是“默认模式”</strong>，但逐个元素的操作由预编译的C代码快速执行。</p><p><a href="https://www.numpy.org.cn/user/quickstart.html#%E5%85%88%E5%86%B3%E6%9D%A1%E4%BB%B6">numpy中文网</a></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>NumPy的主要对象是同构多维数组。<br>轴：即维度，类比二维数组有两个轴<br>数组类被调用：ndarray</p><ul><li>数组轴的个数：ndarray.ndim，该数量称为rank</li><li>数组的维度：ndarray.shape 整数的元组，表示每个轴数组的大小，对于n行m列，shape为(n,m)，shape元组的长度就是轴或者维度的数量</li><li>数组元素的总数：ndarray.size</li><li>描述数组中元素类型的对象ndarray.dtype</li></ul><h2 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h2><p>1.从array函数从常规的python列表创建</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> = np.array([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]) #right<br><span class="hljs-attribute">a</span> = np.array(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>) #wrong<br></code></pre></td></tr></table></figure><p>array还可以将序列的序列转换为二维数据，将序列的序列的序列转为3维数组</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[(1,2),(3,4)]</span>)<br><span class="hljs-selector-tag">b</span><br><span class="hljs-built_in">array</span>(<span class="hljs-selector-attr">[[1,2]</span>,<br>   <span class="hljs-selector-attr">[3,4]</span>])<br></code></pre></td></tr></table></figure><p>也可以在创建时显式指定数组的类型</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">c = np.array( <span class="hljs-comment">[ <span class="hljs-comment">[1,2]</span>, <span class="hljs-comment">[3,4]</span> ]</span>, dtype=complex )<br></code></pre></td></tr></table></figure><p>2.通常，数组的元素最初是未知的，但它的大小是已知的。因此，NumPy提供了几个函数来创建具有初始占位符内容的数组。这就减少了数组增长的必要，因为数组增长的操作花费很大。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">np</span>.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))#由<span class="hljs-number">0</span>组成的数组<br><span class="hljs-attribute">np</span>.ones((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))#由<span class="hljs-number">1</span>组成的数组<br><span class="hljs-attribute">np</span>.empty((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))#随机生成的数组<br><span class="hljs-attribute">np</span>.arange(<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">5</span>)#生成<span class="hljs-number">10</span>到<span class="hljs-number">30</span>，interval为<span class="hljs-number">5</span>的一维数组<br></code></pre></td></tr></table></figure><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ul><li>数组上的算术运算符会应用到 <em>元素</em> 级别</li><li>矩阵也是按照元素计算的，如果想要进行线代上的矩阵乘法，则可以用@符号，而非*</li><li>当使用不同类型的数组进行操作时，结果数组的类型对应于更准确的数组（向上转换）</li><li>通常sum、min等操作针对数组整个元素，但是如果指定轴axis，对轴进行操作</li></ul><h1 id="通函数"><a href="#通函数" class="headerlink" title="通函数"></a>通函数</h1><p>例如sin、exp等，在数组上按元素进行运算，并输出一个新的数组</p><h1 id="索引、切片和迭代"><a href="#索引、切片和迭代" class="headerlink" title="索引、切片和迭代"></a>索引、切片和迭代</h1><ul><li>一维数组的操作类似列表</li><li>多维的数组每个轴可以有一个索引，这些索引以逗号分隔的元组给出；当提供的索引少于轴的数量时，缺失的索引被认为是完整的切片<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[2,3]</span> <span class="hljs-selector-id">#b</span>是二维数组<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[0:5,1]</span><br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[i,:]</span><br><span class="hljs-selector-tag">c</span><span class="hljs-selector-attr">[1,...,5,:]</span><br></code></pre></td></tr></table></figure></li><li>对多维数组进行迭代是相对于第一个轴来说的<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>=[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]<br><span class="hljs-attribute">for</span> row in a:<br><span class="hljs-attribute">print</span>(row)<span class="hljs-meta"></span><br><span class="hljs-meta">[1,2]</span><span class="hljs-meta"></span><br><span class="hljs-meta">[3,4]</span><br></code></pre></td></tr></table></figure></li><li>如果想对数组中的每个元素执行操作，可以使用flat属性，这是数组特有的<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> element in a.flat:<br><span class="hljs-attribute">print</span>(element)<br><span class="hljs-attribute">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="形状操作"><a href="#形状操作" class="headerlink" title="形状操作"></a>形状操作</h1><p>原数组：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">a= <span class="hljs-comment">[<span class="hljs-comment">[1,2,3]</span>,<span class="hljs-comment">[4,5,6]</span>,<span class="hljs-comment">[7,8,9]</span>,<span class="hljs-comment">[10,11,12]</span>]</span><br></code></pre></td></tr></table></figure><p>以下三个命令都返回一个修改后的数组，但不会更改原始数组</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span>.ravel() <span class="hljs-comment">#将数组降为1维</span><br><span class="hljs-keyword">a</span>.reshape((<span class="hljs-number">6</span>,<span class="hljs-number">2</span>)) <span class="hljs-comment">#改变每个维度的长度</span><br><span class="hljs-keyword">a</span>.T <span class="hljs-comment">#行列转换</span><br></code></pre></td></tr></table></figure><p>reshape函数返回带有修改形状的参数，而resize会修改数组本身</p><h1 id="将不同数组堆叠在一起"><a href="#将不同数组堆叠在一起" class="headerlink" title="将不同数组堆叠在一起"></a>将不同数组堆叠在一起</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt; <span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.floor</span>(<span class="hljs-number">10</span>*np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.random</span>((<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)))<br>&gt;&gt;&gt; <span class="hljs-selector-tag">a</span><br><span class="hljs-built_in">array</span>(<span class="hljs-selector-attr">[[ 8.,  8.]</span>,<br>       <span class="hljs-selector-attr">[ 0.,  0.]</span>])<br>&gt;&gt;&gt; <span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.floor</span>(<span class="hljs-number">10</span>*np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.random</span>((<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)))<br>&gt;&gt;&gt; <span class="hljs-selector-tag">b</span><br><span class="hljs-built_in">array</span>(<span class="hljs-selector-attr">[[ 1.,  8.]</span>,<br>       <span class="hljs-selector-attr">[ 0.,  4.]</span>])<br>&gt;&gt;&gt; np<span class="hljs-selector-class">.vstack</span>((<span class="hljs-selector-tag">a</span>,b))<br><span class="hljs-built_in">array</span>(<span class="hljs-selector-attr">[[ 8.,  8.]</span>,<br>       <span class="hljs-selector-attr">[ 0.,  0.]</span>,<br>       <span class="hljs-selector-attr">[ 1.,  8.]</span>,<br>       <span class="hljs-selector-attr">[ 0.,  4.]</span>])<br>&gt;&gt;&gt; np<span class="hljs-selector-class">.hstack</span>((<span class="hljs-selector-tag">a</span>,b))<br><span class="hljs-built_in">array</span>(<span class="hljs-selector-attr">[[ 8.,  8.,  1.,  8.]</span>,<br>       <span class="hljs-selector-attr">[ 0.,  0.,  0.,  4.]</span>])<br></code></pre></td></tr></table></figure><h1 id="拆分数组"><a href="#拆分数组" class="headerlink" title="拆分数组"></a>拆分数组</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua">&gt;&gt;&gt; a = np.<span class="hljs-built_in">floor</span>(<span class="hljs-number">10</span>*np.<span class="hljs-built_in">random</span>.<span class="hljs-built_in">random</span>((<span class="hljs-number">2</span>,<span class="hljs-number">12</span>)))<br>&gt;&gt;&gt; a<br>array(<span class="hljs-string">[[ 9.,  5.,  6.,  3.,  6.,  8.,  0.,  7.,  9.,  7.,  2.,  7.],</span><br><span class="hljs-string">       [ 1.,  4.,  9.,  2.,  2.,  1.,  0.,  6.,  2.,  2.,  4.,  0.]]</span>)<br>&gt;&gt;&gt; np.hsplit(a,<span class="hljs-number">3</span>)   # Split a into <span class="hljs-number">3</span><br>[array(<span class="hljs-string">[[ 9.,  5.,  6.,  3.],</span><br><span class="hljs-string">       [ 1.,  4.,  9.,  2.]]</span>), array(<span class="hljs-string">[[ 6.,  8.,  0.,  7.],</span><br><span class="hljs-string">       [ 2.,  1.,  0.,  6.]]</span>), array(<span class="hljs-string">[[ 9.,  7.,  2.,  7.],</span><br><span class="hljs-string">       [ 2.,  2.,  4.,  0.]]</span>)]<br>&gt;&gt;&gt; np.hsplit(a,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))   # Split a after the third <span class="hljs-keyword">and</span> the fourth column<br>[array(<span class="hljs-string">[[ 9.,  5.,  6.],</span><br><span class="hljs-string">       [ 1.,  4.,  9.]]</span>), array(<span class="hljs-string">[[ 3.],</span><br><span class="hljs-string">       [ 2.]]</span>), array(<span class="hljs-string">[[ 6.,  8.,  0.,  7.,  9.,  7.,  2.,  7.],</span><br><span class="hljs-string">       [ 2.,  1.,  0.,  6.,  2.,  2.,  4.,  0.]]</span>)]<br></code></pre></td></tr></table></figure><p>vsplit沿垂直轴分割</p><h1 id="拷贝和视图"><a href="#拷贝和视图" class="headerlink" title="拷贝和视图"></a>拷贝和视图</h1><h2 id="完全不复制"><a href="#完全不复制" class="headerlink" title="完全不复制"></a>完全不复制</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">12</span>)<br><span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">a</span> <br><span class="hljs-selector-tag">b</span> is <span class="hljs-selector-tag">a</span> <br>True<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.shape</span> = <span class="hljs-number">3</span>,<span class="hljs-number">4</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.shape</span><br>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-selector-id">#a</span> &amp; <span class="hljs-selector-tag">b</span> are identical<br></code></pre></td></tr></table></figure><h2 id="视图或者浅拷贝"><a href="#视图或者浅拷贝" class="headerlink" title="视图或者浅拷贝"></a>视图或者浅拷贝</h2><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python-repl">c = a.view()<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c <span class="hljs-keyword">is</span> a</span><br>False<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c.base <span class="hljs-keyword">is</span> a</span><br>True<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c.shape = <span class="hljs-number">6</span>,<span class="hljs-number">2</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a.shape</span><br>(3,4)<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c[<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] = <span class="hljs-number">1234</span> <span class="hljs-comment">#a will change as well.</span></span><br>#切片数组也是返回一个查看视图<br></code></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python-repl">d = a.copy()<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">d <span class="hljs-keyword">is</span> a</span><br>False<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">d.base <span class="hljs-keyword">is</span> a</span><br>False<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">d[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] = <span class="hljs-number">9999</span> <span class="hljs-comment"># a won&#x27;t change any more.</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sys</title>
    <link href="/smallli.github.io/2023/11/13/sys%20and%20os/"/>
    <url>/smallli.github.io/2023/11/13/sys%20and%20os/</url>
    
    <content type="html"><![CDATA[<h1 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h1><p>sys模块是最常用的和<a href="https://so.csdn.net/so/search?q=python%E8%A7%A3%E9%87%8A%E5%99%A8&spm=1001.2101.3001.7020">python解释器</a>交互的模块,sys模块可供访问由解释器(interpreter)使用或维护的变量和与解释器进行交互的函数。<code>sys</code> 模块提供了许多函数和变量来处理 Python 运行时环境的不同部分。</p><blockquote><p>python解释器：将代码转换为计算机可以运行的语言</p></blockquote><p><a href="%5B%E3%80%90Python%E3%80%91sys%E5%BA%93%E4%BB%8B%E7%BB%8D_%E5%A7%9A%E8%B7%AF%E9%81%A5%E9%81%A5%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/Roaddd/article/details/113576837)">sys常用的函数</a></p><ul><li><p>sys.argv 获取命令行参数list，第一个元素是脚本本身路径</p></li><li><p>sys.path 返回解释器搜索模块的路径list</p><ul><li>第0行是用来调用Python解释器的<strong>脚本的目录</strong></li><li>lib是标准库</li><li>site-packages是第三方库<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">d</span>:\本科毕业论文\ODYM-master\docs<br><span class="hljs-name">C</span>:\Users\HUAWEI\AppData\Local\Programs\Python\Python39\python39.zip<br><span class="hljs-name">C</span>:\Users\HUAWEI\AppData\Local\Programs\Python\Python39\DLLs<br><span class="hljs-name">C</span>:\Users\HUAWEI\AppData\Local\Programs\Python\Python39\lib<br><span class="hljs-name">C</span>:\Users\HUAWEI\AppData\Local\Programs\Python\Python39<br><span class="hljs-name">C</span>:\Users\HUAWEI\AppData\Local\Programs\Python\Python39\lib\site-packages<br><span class="hljs-name">C</span>:\Users\HUAWEI\AppData\Local\Programs\Python\Python39\lib\site-packages\aclscheduletest<span class="hljs-number">-0.0</span><span class="hljs-number">.9</span>a5-py3<span class="hljs-number">.9</span>.egg<br></code></pre></td></tr></table></figure></li></ul></li><li><p>sys.path的应用：可以在运行时修改sys.path来添加或删除搜索路径</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sys<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.append</span>()#在列表最后加入这个路径，最后被搜寻<br>sys<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.insert</span>(<span class="hljs-number">0</span>,directory)#在最开始的位置加入，最先被搜寻<br></code></pre></td></tr></table></figure></li></ul><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><p>[python os模块详解](<a href="https://zhuanlan.zhihu.com/p/150835193">Python os 模块详解 - 知乎 (zhihu.com)</a>)</p><p><code>os</code>就是“operating system”的缩写，顾名思义，<code>os</code>模块提供的就是各种 Python 程序与操作系统进行交互的接口。通过使用<code>os</code>模块，一方面可以方便地与操作系统进行交互，另一方面可以极大增强代码的可移植性。如果该模块中相关功能出错，会抛出<code>OSError</code>异常或其子类异常。</p><blockquote><p>注意，如果是读写文件的话，建议使用内置函数<code>open()</code>；<br>如果是路径相关的操作，建议使用<code>os</code>的子模块<code>os.path</code>；<br>如果要逐行读取多个文件，建议使用<code>fileinput</code>模块；<br>要创建临时文件或路径，建议使用<code>tempfile</code>模块；<br>要进行更高级的文件和路径操作则应当使用<code>shutil</code>模块。</p></blockquote><p>导入<code>os</code>模块时还要小心一点，千万<strong>不要</strong>为了图调用省事儿而将<code>os</code>模块解包导入，即不要使用<code>from os import *</code>来导入<code>os</code>模块；否则<code>os.open()</code>将会覆盖内置函数<code>open()</code>，从而造成预料之外的错误</p><ul><li>os.getcwd() getcwd”实际上是“get the current working directory”的简写，顾名思义，也就是说这个函数的作用是“获取当前工作路径”.</li><li>os.path模块<ul><li>os.path.join()<ul><li>这是一个十分实用的函数，可以将多个传入路径组合为一个路径。实际上是将传入的几个字符串用系统的分隔符连接起来，组合成一个新的字符串，所以一般的用法是将第一个参数作为父目录，之后每一个参数即为下一级目录，从而组合成一个新的符合逻辑的路径。</li><li>但如果传入路径中存在一个“绝对路径”格式的字符串，且这个字符串不是函数的第一个参数，那么<strong>其他在这个参数之前的所有参数都会被丢弃</strong>，余下的参数再进行组合。更准确地说，只有最后一个“绝对路径”及其之后的参数才会体现在返回结果中。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.join(<span class="hljs-string">&quot;just&quot;</span>, <span class="hljs-string">&quot;do&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>)<br><span class="hljs-string">&#x27;just\\do\\python\\dot\\com&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.join(<span class="hljs-string">&quot;just&quot;</span>, <span class="hljs-string">&quot;do&quot;</span>, <span class="hljs-string">&quot;d:/&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>)<br><span class="hljs-string">&#x27;d:/python\\dot\\com&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.join(<span class="hljs-string">&quot;just&quot;</span>, <span class="hljs-string">&quot;do&quot;</span>, <span class="hljs-string">&quot;d:/&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>, <span class="hljs-string">&quot;g:/&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>)<br><span class="hljs-string">&#x27;g:/com&#x27;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">- os.path.dirname()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="hljs-string">&quot;/ityouknow/justdopython/IAmBasename&quot;</span>)<br><span class="hljs-string">&#x27;/ityouknow/justdopython&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="hljs-string">&quot;/ityouknow/justdopython/IAmBasename/&quot;</span>)<br><span class="hljs-string">&#x27;/ityouknow/justdopython/IAmBasename&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tutorials1</title>
    <link href="/smallli.github.io/2023/11/13/tutorials1/"/>
    <url>/smallli.github.io/2023/11/13/tutorials1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>方法学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习</title>
    <link href="/smallli.github.io/2023/11/13/python%E5%AE%89%E8%A3%85%E4%B8%8Epip%E5%92%8C%E5%87%BD%E6%95%B0%E5%8A%9F%E8%83%BD%E6%9F%A5%E8%AF%A2/"/>
    <url>/smallli.github.io/2023/11/13/python%E5%AE%89%E8%A3%85%E4%B8%8Epip%E5%92%8C%E5%87%BD%E6%95%B0%E5%8A%9F%E8%83%BD%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="install"><a href="#install" class="headerlink" title="install"></a>install</h1><blockquote><p>环境变量：编辑系统环境变量-要为python和VS code都配置进</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/584126712">非常详细的Windows端python和VScode下载配置教程</a></p><h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><p>pip是用来管理python包的工具，<strong>查询目前下载的包，在cmd里进行</strong>：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">pip</span> <span class="hljs-string">list</span><br><span class="hljs-string">pip</span> <span class="hljs-string">list</span> <span class="hljs-built_in">--outdated</span> <span class="hljs-comment">#需要更新的包</span><br></code></pre></td></tr></table></figure><ul><li>对pip进行更新<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">pip</span> <span class="hljs-built_in">--version</span> <span class="hljs-comment">#pip的版本</span><br><span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-built_in">--upgrade</span> <span class="hljs-string">pip</span> <span class="hljs-comment">#对pip进行更新</span><br><span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-built_in">--upgrade</span> [<span class="hljs-string">package</span> <span class="hljs-string">name</span>] <span class="hljs-comment">#对其他包进行更新</span><br></code></pre></td></tr></table></figure></li><li>下载和卸载包<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">pip install [<span class="hljs-keyword">package</span> <span class="hljs-title">name]</span><br># pip install xlwt<br>pip uninstall [<span class="hljs-keyword">package</span> <span class="hljs-title">name]</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="help"><a href="#help" class="headerlink" title="help"></a>help</h1><ul><li>通过dir查看某个包的所有函数<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import xlwt<br><span class="hljs-function"><span class="hljs-title">dir</span><span class="hljs-params">(xlwt)</span></span><br></code></pre></td></tr></table></figure></li><li>通过help得到函数说明列表<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import xlwt<br><span class="hljs-function"><span class="hljs-title">help</span><span class="hljs-params">(xlwt)</span></span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态物质流模型</title>
    <link href="/smallli.github.io/2023/11/11/%E5%8A%A8%E6%80%81%E7%89%A9%E8%B4%A8%E6%B5%81%E6%A8%A1%E5%9E%8B/"/>
    <url>/smallli.github.io/2023/11/11/%E5%8A%A8%E6%80%81%E7%89%A9%E8%B4%A8%E6%B5%81%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="动态物质流分析基本概念"><a href="#动态物质流分析基本概念" class="headerlink" title="动态物质流分析基本概念"></a><a href="https://www.industrialecology.uni-freiburg.de/Content/IEooc_Methods3_Lecture1_Corrected_Cencic.pdf">动态物质流分析基本概念</a></h1><p>动态：具有时间尺度<br>系统界定：元素、区域、时间<br>系统变量：存量、存量变化和流量<br>模型参数：通过等式将不同的系统变量联系起来#一般是自己设置的</p><p><strong>输入-输出&#x3D;存量的净变化</strong></p><p>系统界定清晰的好处在于：指标的明确定义<br>效率&#x3D;有效的输出&#x2F;输出</p><p>模型的计算需要设定<strong>初始时期的数值</strong></p><h1 id="动态存量模型"><a href="#动态存量模型" class="headerlink" title="动态存量模型"></a><a href="https://www.industrialecology.uni-freiburg.de/Content/IEooc_Methods3_Lecture2_Corrected_Cencic.pdf">动态存量模型</a></h1><h2 id="群体平衡模型"><a href="#群体平衡模型" class="headerlink" title="群体平衡模型"></a>群体平衡模型</h2><p>流入量-流出量&#x3D;存量随时间的变化率<br>该变化率在时间上累积形成该时间点的存量<br>**应用场景：所有具有守恒定律的过程</p><h2 id="浸出模型"><a href="#浸出模型" class="headerlink" title="浸出模型"></a>浸出模型</h2><p>流出量是存量的一个比例<br><strong>应用场景：放射性衰变、从污染物中浸出（物品离开存量的概率与其先后进入无关）</strong></p><h2 id="冲击响应模型"><a href="#冲击响应模型" class="headerlink" title="冲击响应模型"></a>冲击响应模型</h2><p>流出量是对于瞬时t&#x3D;0的输入量的响应</p><h2 id="对库存增加的响应：age-cohorts-and-lifetime"><a href="#对库存增加的响应：age-cohorts-and-lifetime" class="headerlink" title="对库存增加的响应：age-cohorts and lifetime"></a>对库存增加的响应：age-cohorts and lifetime</h2><ul><li>延迟响应</li><li>衰减响应<br><em>存量的响应是线性的：对于不同输入的响应可以叠加</em></li></ul><p>在这种线性动态存量模型下，每一个输入都可以单独被分割，并且来自于原始输入的每个存量部分可以被表示为t的input</p><p>固定和分布式的生命周期<br>分布式：</p><ul><li>discrete pf</li><li>probability density function pdf<ul><li>积分的形式</li></ul></li></ul><h1 id="流量驱动和存量驱动的模型"><a href="#流量驱动和存量驱动的模型" class="headerlink" title="流量驱动和存量驱动的模型"></a><a href="https://www.industrialecology.uni-freiburg.de/Content/IEooc_Methods3_Lecture3_Corrected_Cencic.pdf">流量驱动和存量驱动的模型</a></h1><ul><li>自下而上：从建筑、汽车和特定商品的材料目录数据</li><li>自上而下：从总的消费数据和一个生命周期模型</li></ul><h2 id="流量驱动"><a href="#流量驱动" class="headerlink" title="流量驱动"></a>流量驱动</h2><blockquote><p>许多存量的数据是无法获得的</p></blockquote><ol><li>表观消费量&#x3D;生产量+进口量-出口量（贸易数据、本国生产数据）</li><li>运用生命周期模型：流出量（t）&#x3D;表观消费量（累积到t）✖分割时间模型</li><li>存量变化：表观消费量-流出量</li><li>存量：最初的存量+存量变化的累积</li></ol><p>产品的生命周期如何确定：调查、数据记录、<strong>文献</strong><br>日本的数据库：<a href="http://www.nies.go.jp/lifespan/">http://www.nies.go.jp/lifespan/</a><br>有python的包可以用来计算</p><h2 id="存量驱动"><a href="#存量驱动" class="headerlink" title="存量驱动"></a>存量驱动</h2><blockquote><p>建立未来发展的物质流<br>    - 假定未来的消费水平，并且计算存量和提供的服务（存量带来服务）<br>    - 假定未来的服务水平，并推断需要的存量，进而计算流量去扩大和保持这些存量</p><ul><li>第二种更加现实常用</li></ul></blockquote><ol><li>计算流出量：利用过往流入量的数据和生命周期模型设定</li><li>计算实际存量和去掉流出量后的存量的差值</li><li>设定流量去弥补这部分存量<br><strong>循环</strong></li></ol>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态物质流</tag>
      
      <tag>方法学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本科毕业论文写作记录</title>
    <link href="/smallli.github.io/2023/11/11/%E6%9C%AC%E7%A7%91%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <url>/smallli.github.io/2023/11/11/%E6%9C%AC%E7%A7%91%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-11-11"><a href="#2023-11-11" class="headerlink" title="2023-11-11"></a>2023-11-11</h1><blockquote><p>[1] Liang Y, Kleijn R, Van Der Voet E. Increase in demand for critical materials under IEA Net-Zero emission by 2050 scenario[J]. Applied Energy, 2023, 346.</p></blockquote><h2 id="情景设置"><a href="#情景设置" class="headerlink" title="情景设置"></a>情景设置</h2><p>使用了IEA的NZE情景，特别的地方在于只考虑能源转型就可以实现2050的零排放目标，并不需要非能源部门的转型。<br>这个情景是在2021年推出的，已经下载了数据集，只有2030、2040、2050等十个间隔年的粗糙的每个发电部门，例如风力发电、太阳能发电的具体数据。</p><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><p><strong>如何从情景的设置外推出每种发电部门在转型过程所需金属的需求？</strong></p><p>这篇文章的文献综述部分给出了其他人计算的方法，我粗略地看了一下，一般都用了非常多的情景来计算，估计计算结果会比较粗糙。作者指出他要解决的问题是<em>NEA情景下特定技术的材料需求</em>，今天先学习这种。</p><ul><li>动态物质流模型</li><li>尺度：全球</li><li>行业：发电行业、道路乘用车两个地方的主要低碳技术（符合NZE情景）-光、风、电动汽车</li><li>预测未来材料需求-不止基于不同的低碳技术，还考虑潜在的回收材料</li><li>结果比较：IEA SDS情景</li><li>敏感性分析：材料强度、寿命等参数改变的作用</li></ul><h3 id="技术层面的模型"><a href="#技术层面的模型" class="headerlink" title="技术层面的模型"></a>技术层面的模型</h3><ol><li>目标的装机量数据（风能和光伏）在NEA情景下被认为是一个<strong>存量</strong></li><li>根据<strong>存量驱动模型</strong>可以计算相应的流入量和流出量</li><li>电动汽车的存量基于①整个乘用车市场的存量②NZE里电动汽车的份额<br><em>基于物质守恒原则</em></li></ol><p>每种技术的survival function基于生命周期分布：正态或韦伯&#x2F;找数据<br>计算每种技术的装机流量：风机、太阳能板和电动机</p><h3 id="材料层面的模型"><a href="#材料层面的模型" class="headerlink" title="材料层面的模型"></a>材料层面的模型</h3><blockquote><p>从技术层面的公式外推到次级技术和相关的材料</p></blockquote><ol><li>每年新增加的某种技术的装机量（inflow）乘以材料强度来计算材料需求</li><li>基于<strong>流量驱动模型</strong></li></ol><p><strong>数据来源</strong><br><strong>次级技术的渗透率</strong>由IEA的报告和一些相关研究确定（附件）</p><ul><li>电池数据2040-2050年缺乏，假定了固定不变的份额</li><li>历史风光数据来自于国际可再生能源委员会IRENA</li><li>历史电动汽车数据从全球EV展望2021和2022获得</li><li>未来风光装机量从NZE报告获得</li><li>未来人口和EV stock的种类份额从世界人口展望2019和IEA获得</li><li>风光装机数据从IEA获得的为每隔5年的logistic回归拟合（origin）</li><li>回收率从文献确定</li></ul><blockquote><p>假设随着技术进步，材料强度下降</p></blockquote><h3 id="敏感性分析"><a href="#敏感性分析" class="headerlink" title="敏感性分析"></a>敏感性分析</h3><p>两种可选择的敏感性变异</p><ol><li>改变生命周期假设，缩短EV的lifetime并且增加风光的（文献基础）<ol><li>文献支持：这样操作会降低相关金属的一次需求</li><li>但会减少二次资源供给的潜力</li></ol></li><li>假设不变的材料强度<ol><li>对于电池，假定未来创新；并且装机量升高</li></ol></li></ol><h1 id="2023-11-12"><a href="#2023-11-12" class="headerlink" title="2023-11-12"></a>2023-11-12</h1><blockquote><p>问题：为什么到材料层面要用inflow-driven模型？</p></blockquote><p><em>装机容量：发电站所有发电机组额定发电功率的总和</em><br><em>材料强度：提供单位服务（装机容量）所需要的材料</em></p><p><strong>个人思考：</strong></p><ol><li>文献中的计算思路<ol><li>从情景中得到的是装机容量的存量数据-模型-每种技术装机容量的流量</li><li>次级技术的份额-动态变化</li><li>每种次级技术每年的流量</li><li>利用每种次级技术的材料强度（随年份变化反映技术变化）计算材料的流量</li><li>流量驱动模型-每年的存量</li></ol></li><li>如果全部用存量驱动模型呢？<ol><li>每年的装机容量-技术份额-材料强度-存量？</li><li>计算流量</li></ol></li></ol><h1 id="2023-11-13"><a href="#2023-11-13" class="headerlink" title="2023-11-13"></a>2023-11-13</h1>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态物质流</tag>
      
      <tag>关键金属</tag>
      
      <tag>需求分析</tag>
      
      <tag>能源转型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>撒哈拉的故事</title>
    <link href="/smallli.github.io/2020/04/22/%E6%92%92%E5%93%88%E6%8B%89%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <url>/smallli.github.io/2020/04/22/%E6%92%92%E5%93%88%E6%8B%89%E7%9A%84%E6%95%85%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>每想你一次，天上飘落一粒沙，从此形成了撒哈拉。——三毛</p></blockquote><p>看完这本书真的很佩服三毛可以活得那么恣意，那么随性，也很羡慕她有一个处处支持她的丈夫荷西。只是因为三毛说想要去见识沙漠的生活，他就不声不响的在撒哈拉申请到一份工作，在那租好房子等三毛过去。</p><p>大漠生活，不用想一定是非常艰难的，但是三毛与荷西硬是在沙漠中活出了一份诗意。精心装扮的小屋，与抠门邻居的有趣相处，甚至还有令人捧腹不禁的“沙漠观浴记”，字里行间都透露出他们沙漠生活的幸福与乐观。正是有相爱的人互相陪伴，再恶劣的环境也能活得有滋有味。就像那句话：心若没有栖息的地方，到哪里都是流浪。而若是找到那处栖息地，环境的好坏与否真的不重要了。</p><p>当然文中也不全都是轻松诙谐之文，“娃娃新娘”这篇文章就让我看得心情非常沉重。撒哈拉威人的某些不尊重女性的封建习俗，真是让人非常气愤。三毛作为一个现代女性，想要阻止这种事情的发生却又无能为力。作为读者，我也深感无力，就是现在世界上也有很多地方残留着这些封建糟粕，除了唏嘘与感叹，真的不知该说些什么。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
